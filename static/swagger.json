{
    "openapi": "3.0.0",
    "info": {
      "description": "This is a Flask-based REST API that allows users to manage and check if submitted messages are palindromes",
      "version": "1.0.0",
      "title": "Palindrome REST API",
      "license": {
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT"
      }
    },
    "tags": [
      {
        "name": "Palindrome",
        "description": "This collection contains all the endpoints required to perform CRUD operations on messages"
      }
    ],
    "servers": [
      {
        "url": "/api/v1"
      }
    ],
    "components": {
      "schemas": {
        "PalindromeCreateDTO": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            }
          }
        },
        "PalindromeResponseDTO":{
          "type":"object",
          "properties":{
            "message": {
              "type":"string"
            },
            "message_id":{
              "type":"string"
            },
            "isPalindrome":{
              "type":"boolean"
            }
          }
        },
        "message_id": {
          "type": "string"
        }
      }
    },
    "paths": {
      "/messages": {
        "post": {
          "tags": ["Palindrome"],
          "summary": "Post new message",
          "description":"This API endpoint is responsible for creating a new message entry. The service automatically checks if the provided content is a palindrome and stores in the database.",
          "requestBody": {
            "description": "Post new item to the inventory",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PalindromeCreateDTO"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "On success the message gets created in the database",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PalindromeResponseDTO"
                  }
                }
              }
            },
            "400": {
              "description": "This error is thrown when request payload is invalid for example missing fields, empty message etc."
            },
            "500": {
              "description": "This error is thrown when a problem occurred while trying to read the message from the database."
            }
          }
        },
        "get": {
          "tags": ["Palindrome"],
          "summary": "Get all messages",
          "description":"This API endpoint is responsible for fetching all the messages. Upon accessing the endpoint all the messages in the database are retrieved and sent. If there are no messages in the database an error is thrown.",
          "responses": {
            "200": {
              "description": "success response returns a JSON array containing all message objects",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PalindromeResponseDTO"
                  }
                }
              }
            },
            "404": {
              "description": "This error is thrown when no message exists with the specified message_id"
            },
            "500": {
              "description": "This error is thrown when a problem occurred while trying to read the message from the database."
            }
          }
        }
      },
      "/messages/{message_id}": {
        "get": {
          "tags": ["Palindrome"],
          "summary": "Get message by message_id ",
          "description":"This API endpoint is responsible for fetching a message based on the message_id provided in the path. Upon accessing the endpoint the specified message with the message_id mentioned is retrieved and sent if found and if not found an error is thrown.",
          "parameters": [
            {
              "name": "message_id",
              "in": "path",
              "description": "Id of the message",
              "required": true,
              "type": "string",
              "schema": {
                "$ref": "#/components/schemas/message_id"
              }
            }
          ],
  
          "responses": {
            "200": {
              "description": "On success the message object is returned with message body",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PalindromeResponseDTO"
                  }
                }
              }
            },
            "404": {
              "description": "This error is thrown when no message exists with the specified message_id"
            },
            "500": {
              "description": "This error is thrown when a problem occurred while trying to read the message from the database."
            }
          }
        },
        "delete": {
          "tags": ["Palindrome"],
          "summary": "Delete message by message_id",
          "description":"This API endpoint is responsible for deleting a message based on the message_id provided in the path. Upon accessing the endpoint the specified message with the message_id mentioned is deleted if found and if not found an error is thrown.",
          "parameters": [
            {
              "name": "message_id",
              "in": "path",
              "description": "Id of the message",
              "required": true,
              "type": "string",
              "schema": {
                "$ref": "#/components/schemas/message_id"
              }
            }
          ],
  
          "responses": {
            "200": {
              "description": "Success response states that the message was found and deleted from the system.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "This error is thrown when no message exists with the specified message_id to delete."
            },
            "500": {
              "description": "This error is thrown when a problem occurred while trying to delete the message from the database"
            }
          }
        }
      }
    }
  }